// Mocks generated by Mockito 5.2.0 from annotations
// in crypto_trends/test/features/home/presenter/bloc/trending_coin_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:crypto_trends/core/network/network_info.dart' as _i5;
import 'package:crypto_trends/errors/failures.dart' as _i9;
import 'package:crypto_trends/features/coinList/domain/entities/coin.dart'
    as _i10;
import 'package:crypto_trends/features/coinList/domain/repositories/get_coin_list_repository.dart'
    as _i3;
import 'package:crypto_trends/features/coinList/domain/usecases/get_coin_list.dart'
    as _i8;
import 'package:crypto_trends/features/home/data/trending_coin_remote_data_source.dart'
    as _i7;
import 'package:dartz/dartz.dart' as _i4;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClient_0 extends _i1.Fake implements _i2.Client {}

class _FakeCoinListRepository_1 extends _i1.Fake
    implements _i3.CoinListRepository {}

class _FakeEither_2<L, R> extends _i1.Fake implements _i4.Either<L, R> {}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i5.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> get isConnected =>
      (super.noSuchMethod(Invocation.getter(#isConnected),
          returnValue: Future<bool>.value(false)) as _i6.Future<bool>);
}

/// A class which mocks [TrendingCoinRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrendingCoinRemoteDataSource extends _i1.Mock
    implements _i7.TrendingCoinRemoteDataSource {
  MockTrendingCoinRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(Invocation.getter(#client),
      returnValue: _FakeClient_0()) as _i2.Client);
  @override
  _i6.Future<List<String>> getTrendingCoinsIds() =>
      (super.noSuchMethod(Invocation.method(#getTrendingCoinsIds, []),
              returnValue: Future<List<String>>.value(<String>[]))
          as _i6.Future<List<String>>);
}

/// A class which mocks [GetRemoteCoinList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRemoteCoinList extends _i1.Mock implements _i8.GetRemoteCoinList {
  MockGetRemoteCoinList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CoinListRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeCoinListRepository_1()) as _i3.CoinListRepository);
  @override
  _i6.Future<_i4.Either<_i9.Failure, List<_i10.Coin>>> call(
          {String? currency, int? page, List<String>? ids}) =>
      (super.noSuchMethod(
          Invocation.method(
              #call, [], {#currency: currency, #page: page, #ids: ids}),
          returnValue: Future<_i4.Either<_i9.Failure, List<_i10.Coin>>>.value(
              _FakeEither_2<_i9.Failure, List<_i10.Coin>>())) as _i6
          .Future<_i4.Either<_i9.Failure, List<_i10.Coin>>>);
}
